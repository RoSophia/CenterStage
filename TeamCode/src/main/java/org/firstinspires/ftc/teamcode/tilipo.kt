package org.firstinspires.ftc.teamcode

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode
import org.firstinspires.ftc.teamcode.hardware.Intakes
import org.firstinspires.ftc.teamcode.pp.PP
import org.firstinspires.ftc.teamcode.utils.RobotFuncs
import org.firstinspires.ftc.teamcode.utils.RobotFuncs.create_god
import org.firstinspires.ftc.teamcode.utils.RobotFuncs.initma
import org.firstinspires.ftc.teamcode.utils.RobotFuncs.preinit
import org.firstinspires.ftc.teamcode.utils.RobotFuncs.startma
import org.firstinspires.ftc.teamcode.utils.RobotVars
import org.firstinspires.ftc.teamcode.utils.Util
import kotlin.math.cos
import kotlin.math.sin

object tilipo {
    fun runOpMode(lom: LinearOpMode, fn: Boolean) { /// TODO: dashboard.sendImage(NekoArc)
        preinit()
        initma(lom, RobotVars.OpModeKMS)
        create_god()

        lom.waitForStart()

        startma()

        while (!lom.isStopRequested) {
            if (RobotFuncs.controller.C1A == RobotFuncs.controller.PRESSED) {
                RobotFuncs.swerve.locked = true
                RobotFuncs.swerve.move(0.1, 0.0, 0.0)
            } else {
                RobotFuncs.swerve.locked = false
            }

            /// TODO: REMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVE
            /// TODO: REMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVE
            /// TODO: REMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVE
            /// TODO: REMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVE
            /// TODO: REMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVE
            /// TODO: REMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVE
            /// TODO: REMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVE
            if (RobotFuncs.controller.C1RB == RobotFuncs.controller.JUST_PRESSED) { /// TODO: REMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVE
                /// TODO: REMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVE
                /// TODO: REMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVE
                /// TODO: REMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVE
                /// TODO: REMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVE
                /// TODO: REMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVE
                /// TODO: REMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVE
                /// TODO: REMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVE
                /// TODO: REMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVE
                /// TODO: REMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVE
                /// TODO: REMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVEREMOVE
                RobotFuncs.intake.status = Intakes.SStack2
            }
            if (RobotFuncs.controller.C1DU == RobotFuncs.controller.JUST_PRESSED) {
                RobotFuncs.clown.catchPixel()
            }
            if (RobotFuncs.controller.C1DD == RobotFuncs.controller.JUST_PRESSED) {
                RobotFuncs.clown.goUp(0)
            }
            if (RobotFuncs.controller.C1B == RobotFuncs.controller.JUST_PRESSED) {
                RobotFuncs.clown.goDown()
            }
            if (RobotFuncs.controller.C1RSB == RobotFuncs.controller.JUST_PRESSED) {
                RobotFuncs.clown.goPreloadUp()
            }
            if (RobotFuncs.controller.C1LSB == RobotFuncs.controller.JUST_PRESSED) {
                RobotFuncs.clown.goPreloadDown()
            }
            if (RobotFuncs.controller.C1LB == RobotFuncs.controller.JUST_PRESSED) {
                RobotFuncs.intake.status = Intakes.SStack1
            }
            if (RobotFuncs.controller.C1Y == RobotFuncs.controller.JUST_PRESSED) {
                if (RobotFuncs.intake.running) {
                    RobotFuncs.intake.status = Intakes.SNothing
                } else {
                    RobotFuncs.intake.status = Intakes.SIntake
                }
            }

            if (RobotFuncs.controller.C2PS == RobotFuncs.controller.JUST_PRESSED) {
                if (!RobotFuncs.slides.RIDICAREEEEEEEEEE) {
                    RobotFuncs.slides.youShouldHangYourselfNOW()
                } else {
                    RobotFuncs.slides.RIDICAREEEEEEEEEE = false
                }
            }

            if (RobotFuncs.controller.C2Y == RobotFuncs.controller.JUST_PRESSED) {
                if (RobotFuncs.intake.running) {
                    RobotFuncs.intake.status = Intakes.SNothing
                } else {
                    RobotFuncs.intake.status = Intakes.SIntake
                }
            }
            if (RobotFuncs.controller.C2RB == RobotFuncs.controller.JUST_PRESSED) {
                RobotFuncs.clown.ghearaFar?.position = RobotVars.ClownFDeschis
            }

            if (RobotFuncs.controller.C2LB == RobotFuncs.controller.JUST_PRESSED) {
                RobotFuncs.clown.ghearaNear?.position = RobotVars.ClownNDeschis
            }

            if (RobotFuncs.controller.C2DL == RobotFuncs.controller.JUST_PRESSED) {
                RobotFuncs.clown.goLeft()
            }
            if (RobotFuncs.controller.C2DR == RobotFuncs.controller.JUST_PRESSED) {
                RobotFuncs.clown.goRight()
            }
            if (RobotFuncs.controller.C2A == RobotFuncs.controller.JUST_PRESSED) {
                RobotFuncs.clown.goUp(0)
            }
            if (RobotFuncs.controller.C2B == RobotFuncs.controller.JUST_PRESSED) {
                RobotFuncs.clown.goDown()
            }
            if (RobotFuncs.controller.C2RSB == RobotFuncs.controller.JUST_PRESSED) {
                RobotFuncs.clown.close()
            }

            val g2coef = 1.0 - 0.6 * lom.gamepad2.right_trigger
            if (!Util.epsEq(lom.gamepad2.right_stick_y.toDouble(), 0.0)) {
                RobotFuncs.slides.power = -lom.gamepad2.right_stick_y.toDouble() * g2coef
            }
            if (RobotFuncs.controller.C2LT == RobotFuncs.controller.JUST_PRESSED) {
                RobotFuncs.avion.position = RobotVars.AvionDeschis
            }

            if (RobotFuncs.controller.C2DU == RobotFuncs.controller.JUST_PRESSED) {
                RobotFuncs.avion.position = RobotVars.AvionInchis
            }
            if (RobotFuncs.controller.C2DD == RobotFuncs.controller.JUST_PRESSED) {
                RobotFuncs.intake.status = Intakes.SInvert
            }

            if (RobotVars.__IntakeSetStatus != 20) {
                RobotFuncs.intake.status = RobotVars.__IntakeSetStatus
                RobotVars.__IntakeSetStatus = 20
            }

            if (RobotVars.__LOG_STATUS) {
                RobotFuncs.log("DiffyActualPos", RobotFuncs.clown.actualDiffyPos)
            }

            val canvas = RobotFuncs.tp.fieldOverlay()
            canvas.setStrokeWidth(1)
            canvas.setStroke("#FF00C3")
            canvas.strokeCircle(RobotFuncs.localizer.pose.x * PP.SCALE, RobotFuncs.localizer.pose.y * PP.SCALE, PP.robotRadius)
            canvas.setStroke("#00FFC3")
            canvas.strokeLine(RobotFuncs.localizer.pose.x * PP.SCALE, RobotFuncs.localizer.pose.y * PP.SCALE,
                    (RobotFuncs.localizer.pose.x * PP.SCALE + PP.robotRadius * cos(RobotFuncs.localizer.pose.h)), (RobotFuncs.localizer.pose.y * PP.SCALE + PP.robotRadius * sin(RobotFuncs.localizer.pose.h)))

            RobotFuncs.moveSwerve(fn)
            RobotFuncs.update()
        }

        RobotVars.TimmyToClose = true
        RobotFuncs.endma()
    }
}